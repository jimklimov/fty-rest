<#
 #
 # Copyright (C) 2015-2017 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_PUT.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Implementation of PUT(update) operation on any asset
 */
 #><%pre>
#include <sys/types.h>
#include <unistd.h>

#include <cxxtools/jsondeserializer.h>
#include <fty_common.h>
#include "shared/configure_inform.h"
#include "src/db/inout.h"
#include "db/assets.h"
</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        http_die ("internal-error", "Database is not ready yet, please try again after a while.");
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "U"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);
    std::string id = request.getArg("id");

    if (id.empty () || !is_ok_name (id.c_str ()))
        http_die ("request-param-bad", id.c_str ());

    // Read json, transform to csv, use existing functionality
    cxxtools::SerializationInfo si;
    bool send_inactive = false;
    // read json a deserialize it
    try {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);

        auto si_id = si.findMember("id");
        std::string status;
        si.getMember("status") >>= status;

        if ( si_id == NULL ) {
            si.addMember("id") <<= id;
        }
        else if (status  == "nonactive") {
            if (id == "rackcontroller-0") {
                log_debug ("Element %s cannot be inactivated.", si_id);
                http_die ("action-forbidden", "Setting status of rackcontroller-0");
            }
            send_inactive = true;
        }
        else {
            si_id->setValue(id);
        }
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("bad-request-document", e.what());
    }

    shared::CsvMap cm;
    try{
        cm = shared::CsvMap_from_serialization_info(si);
        cm.setUpdateUser(user.login());
        std::time_t timestamp = std::time(NULL);
        char mbstr[100];
        if (std::strftime(mbstr, sizeof (mbstr), "%FT%T%z", std::localtime(&timestamp))) {
            cm.setUpdateTs(std::string(mbstr));
        }
    }
    catch (const std::invalid_argument &e) {
        log_error ("%s", e.what());
        http_die("bad-request-document", e.what());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("internal-error", "See log for more details");
    }

    // PUT /asset is currently used to update an existing device (only asset_element and ext_attributes)
    //      for EMC4J.
    // empty document
    if (cm.cols() == 0 || cm.rows() == 0) {
        http_die("bad-request-document", "Cannot import empty document.");
    }
    if (!cm.hasTitle("type")) {
        http_die("request-param-required", "type");
    }

    // currently we do not need to support updatein these elements
    log_debug ("starting load");
    try {
        // actual update - throws exceptions
        auto row = persist::process_one_asset (cm);

        // here we are -> update was successful
        // ATTENTION:  1. sending messages is "hidden functionality" from user
        //             2. if any error would occur during the sending message,
        //                user will never know if element was actually inserted
        //                or not

        // this code can be executed in multiple threads -> agent's name should
        // be unique at the every moment
        std::string agent_name = utils::generate_mlm_client_id("web.asset_put");

        // if asset is inactive send DELETE asset message to let everybody know that
        // we don't want to monitor it
        try {
            if (send_inactive) {
                send_configure (row.first, persist::asset_operation::DELETE, agent_name);
                return HTTP_OK;
            }
        }
        catch (const std::runtime_error &e) {
            log_error ("%s", e.what());
            std::string msg = "Error during sending DELETE for inactive asset. Consult system log.";
            http_die("internal-error", msg.c_str());
        }

        try{
            send_configure (row.first, row.second, agent_name);
        }
        catch (const std::runtime_error &e) {
            log_error ("%s", e.what());
            std::string msg = "Error during configuration sending of asset change notification. Consult system log.";
            http_die("internal-error", msg.c_str());
        }
        // no unexpected errors was detected
        // process results
        std::pair<std::string, std::string> asset_names = persist::id_to_name_ext_name (row.first.id);
        if (asset_names.first.empty () && asset_names.second.empty ())
            http_die ("internal-error", "Database failure");

</%cpp>
{<$$ utils::json::jsonify ("id", asset_names.first) $>}
<%cpp>
        return HTTP_OK;
    }
    catch (const BiosError& e) {
        LOG_END_ABNORMAL(e);
        http_die_idx(e.idx, e.what());
    }
    catch (const std::exception& e) {
        LOG_END_ABNORMAL(e);
        http_die("internal-error", "Consult system log");
    }
}
</%cpp>
