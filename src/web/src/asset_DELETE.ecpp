<#
 #
 # Copyright (C) 2015-2017 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_DELETE.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \brief Implementation of DELETE operation on any asset
 */
 #><%pre>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#include "data.h"
#include "configure_inform.h"
#include "defs.h"
#include "helpers.h"
</%pre>
<%thread scope="global">
asset_manager     asset_mgr;
</%thread>
<%request scope="global">
UserInfo user;
//bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        http_die ("internal-error", "Database is not ready yet, please try again after a while.");
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "D"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);
    std::string checked_id; // user-friendly identifier

    // sanity check
    {
        std::string id = request.getArg("id");
        if ( id.empty() ) {
            http_die("request-param-required", "id");
        }

        if ( !is_ok_name (id.c_str ()) )
            http_die ("request-param-bad", "id", id.c_str (), "valid asset name");
        checked_id = id;
    }
    // end sanity checks

    // get id by name
    int64_t dbid = persist::name_to_asset_id (checked_id);
    if (dbid == -1) {
        http_die ("element-not-found", checked_id.c_str ());
    }
    if (dbid == -2) {
        http_die ("internal-error", "Connecting to database failed.");
    }

    // delete it
    db_a_elmnt_t row;
    auto ret = asset_mgr.delete_item (dbid, row);
    if ( ret.status == 0 ) {
        if ( ret.errsubtype == DB_ERROR_NOTFOUND ) {
            http_die("element-not-found", checked_id.c_str ());
        }
        else {
            http_die("data-conflict",  checked_id.c_str (), "Asset has elements inside, DELETE them first!");
        }
    }
    // here we are -> delete was successful
    // ATTENTION:  1. sending messages is "hidden functionality" from user
    //             2. if any error would occur during the sending message,
    //                user will never know if element was actually deleted
    //                or not

    // this code can be executed in multiple threads -> agent's name should
    // be unique at the every moment
    std::string agent_name("web.asset_delete.");
    agent_name.append (std::to_string ( static_cast<int> (getpid ()) ))
        .append (".")
        .append (std::to_string ( syscall(SYS_gettid) ));
    try {
        send_configure (row, persist::asset_operation::DELETE, agent_name);
</%cpp>
{}
<%cpp>
        return HTTP_OK;
    }
    catch (const std::runtime_error &e) {
        log_error ("%s", e.what());
        std::string msg = "Error during configuration sending of asset change notification. Consult system log.";
        http_die("internal-error", msg.c_str());
    }
}
</%cpp>
