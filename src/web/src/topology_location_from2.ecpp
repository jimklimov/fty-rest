<#
 #
 # Copyright (C) 2017 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file topology_location_from2.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief  process location topology requests (from)
 *
 * It is the first file in the chain. Here would be done the complete
 * parameter check. If parameters are ok, but it is not "from" but "to"
 * request control would be delegated to the topology_location_to.ecpp.
 */
 #><%pre>
#include <string>
#include <exception>
#include <czmq.h>

#include "dbpath.h"
#include "data.h"
#include "location_helpers.h"
#include "asset_types.h"
#include "helpers.h"
#include "topology2.h"
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // Sanity check end

    // ##################################################
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // checked parameters
    bool checked_recursive = false;
    std::string checked_filter;
    std::string checked_feed_by;
    std::string checked_from;
	tntdb::Connection conn = tntdb::connectCached (url);

    {
        std::string from = qparam.param("from");
        std::string to = qparam.param("to");
        std::string filter = qparam.param("filter");
        std::string feed_by = qparam.param("feed_by");
        std::string recursive = qparam.param("recursive");

        // forward to other ecpp files - topology2 does not (yet) support
        // ... unlockated elements or to=
        // ... so fall back to older implementation
        if (from.empty () || !to.empty () || from == "none")
            return DECLINED;

        std::transform (recursive.begin(), recursive.end(), recursive.begin(), ::tolower);
        if (recursive == "true") {
            checked_recursive = true;
        }
        else if (!recursive.empty() && recursive != "false") {
            http_die("request-param-bad", "recursive", recursive.c_str(), "'true'/'false'");
        }

        std::transform (filter.begin(), filter.end(), filter.begin(), ::tolower);
        if (!filter.empty ())
            if (filter == "rooms"   ||
                filter == "rows"    ||
                filter == "racks"   ||
                filter == "devices" ||
                filter == "groups" )
                checked_filter = filter;
            else
                http_die("request-param-bad","filter", filter.c_str(), "'rooms'/'rows'/'racks'/'groups'/'devices'");

        if (!feed_by.empty ())
        {
            if (filter != "devices")
                http_die("parameter-conflict", "Variable 'feed_by' can be specified only with 'filter=devices'");
            if ( from == "none")
                http_die("parameter-conflict", "With variable 'feed_by' variable 'from' can not be 'none'");
            if (!persist::is_power_device (conn, feed_by))
                http_die("request-param-bad", "feed_by", feed_by.c_str(), "must be a power device.");
            else
                checked_feed_by = feed_by;
        }

        if (!from.empty ()) {
            checked_from = from;
        }
        else {
            http_die("request-param-bad", "from");
        }
    }

    std::set <std::string> fed_by;
    if (!checked_feed_by.empty ())
    {
		fed_by = persist::topology2_feed_by (conn, checked_feed_by);
        if (fed_by.empty ())
            http_die("request-param-bad", "feed_by", checked_feed_by.c_str(), "must be a device.");
    }


	auto result = persist::topology2_from (conn, checked_from);
    if (result.empty () && checked_from != "none")
        http_die("request-param-bad", "from", checked_from.c_str(), "valid asset name.");

    auto groups = persist::topology2_groups (conn, checked_from, checked_recursive);

	if (checked_recursive) {
			persist::topology2_from_json_recursive (
				reply.out (),
                conn,
				result,
				checked_from,
				checked_filter,
				fed_by,
                groups
                );
	}
	else {
			persist::topology2_from_json (
				reply.out (),
				result,
				checked_from,
				checked_filter,
				fed_by,
                groups
                );
	}
</%cpp>
