<#
 #
 # Copyright (C) 2015 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file license_POST.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Alena Chernikava <alenachernikava@Eaton.com>
 * \brief Accept license
 */
 #><%pre>
#include <unistd.h>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string.h>
#include <stdlib.h>

#include "utils.h"
#include "cleanup.h"
#include "helpers.h"
#include "log.h"
#include "dbpath.h"
#include "subprocess.h"
#include "filesystem.h"

</%pre>
<%request scope="global">
UserInfo user;
//bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready check is skipped, as this request starts database

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    char *license_file = get_current_license_file ();
    if ( license_file == NULL ) {
        http_die ("internal-error", "Cannot get the path to the text of the current license");
    }
    char *current_license_version = get_current_license_version (license_file);
    if ( current_license_version == NULL ) {
        free (license_file); license_file = NULL;
        http_die ("internal-error", "Cannot get version of the text of the current license");
    }

    char *accepted_license_file = get_accepted_license_file ();
    if ( accepted_license_file == NULL ) {
        free (current_license_version); current_license_version = NULL;
        free (license_file); license_file = NULL;
        http_die ("internal-error", "Cannot get the path to the actual status of the accepted license");
    }
    log_debug ("variable accepted_license_file == '%s'", accepted_license_file);
    FILE *f = fopen (accepted_license_file, "w");
    if ( f == NULL ) {
        free (accepted_license_file); accepted_license_file = NULL;
        free (current_license_version); current_license_version = NULL;
        free (license_file); license_file = NULL;
        http_die ("internal-error", "Cannot open file with actual information about accepted license");
    }
    uint64_t tme = ::time(NULL);
    fprintf (f, "%s\n%" PRIu64 "\n%s\n", current_license_version, tme, user.login().c_str());
    fclose (f);
    log_debug("License: version='%s',tme='%" PRIu64 "',user='%s')",
                current_license_version, tme, user.login().c_str());

    std::string clv {current_license_version};
    free (accepted_license_file); accepted_license_file = NULL;
    free (current_license_version); current_license_version = NULL;
    free (license_file); license_file = NULL;

    // once done, read and setup environment files for accessing the database
    if (!shared::is_file (PASSWD_FILE) || !database_ready) {

        // call fty-db-init to start mysql and initialize the database
        // and more importantly - wait for initialization to complete
        // (it should have got started via systemd .path unit by now)
        // before we try to re-read credentials below.
        // TODO: depending on storage and other external conditions,
        // this operation can take a while. The tntnet web server can
        // consider this thread "hung" and would self-restart after
        // 10 minutes; if this does happen - we should add a thread
        // to report "we're alive" to the server while waiting...
        log_info("Starting db service .." );
        shared::Argv proc_cmd {"/usr/libexec/fty/start-db-services"};
        std::string proc_out, proc_err;

        int rv = shared::simple_output (proc_cmd, proc_out, proc_err);
        if (rv != 0)
            http_die ("internal-error", "Starting of start-db-services have failed. Consult system logs");

        // once done, check environment files for accessing the database
        if (!dbreadcredentials())
            http_die ("internal-error", "Database password file is missing");
    }else{
        //enforce reload credential
        if (!dbreadcredentials())
            http_die ("internal-error", "Database password file is missing");  
    }
</%cpp>
{ "success" : "License version <$ clv $> accepted." }
<%cpp>
    database_ready = true;
}
</%cpp>
