# Custom targets, not managed via zproject

### No-arch pathnames wanted
clientdir ?= $(libexecdir)/$(PACKAGE)
### Autotools insist on having these defined, no "?=" here:
DISTCLEANDIRS =
check_LTLIBRARIES =
### Configure flag for CI runs
ENABLE_CI_TESTS ?=
### Note: lower-cased on purpose; the "cibin_PROGRAMS"
### for a particular run is conditionally defined below
cibin_programs =

# Do not link bios-csv with libfty_rest or libtntnet
# Note: ignore the Make warning that
#   src/Makemodule-local.am:7: warning: src_db_bios_csv_LDADD was already
#     defined in condition ENABLE_DB_BIOS_CSV, which is included in
#     condition TRUE ...
#   src/Makemodule.am:146: ... 'src_db_bios_csv_LDADD' previously defined here
override src_db_bios_csv_LDADD := ${libzmq_LIBS} ${czmq_LIBS} ${malamute_LIBS} ${cidr_LIBS} ${cxxtools_LIBS} ${tntdb_LIBS} ${magic_LIBS} ${fty_proto_LIBS} ${libsasl2_LIBS} ${log4cplus_LIBS} ${fty_common_LIBS}

# Statically link bios-csv with everything needed
if ENABLE_DB_BIOS_CSV

### TODO : Use libpriv-util defined below for tests?
### Or keep this program truly with least possible run-time dependencies?
src_db_bios_csv_SOURCES += \
	 src/shared/utils.cc \
	 include/shared/utils.h \
	 include/defs.h \
	 include/shared/utils_json.h \
	 src/shared/utils_json.cc \
	 src/shared/utilspp.cc \
	 include/shared/utilspp.h \
	 include/shared/subprocess.h \
	 src/shared/subprocess.cc \
	 include/shared/augtool.h \
	 src/shared/augtool.cc \
	 include/shared/ic.h \
	 src/shared/ic.cc \
	 include/shared/csv.h \
	 src/shared/csv.cc \
	 include/shared/cidr.h \
	 src/shared/cidr.cc \
	 include/db/types.h \
	 src/persist/assetcrud.cc \
	 src/persist/assetcrud.h \
	 src/persist/assettopology.cc \
	 src/persist/assettopology.h \
	 src/persist/persist_error.cc \
	 src/persist/persist_error.h \
	 src/persist/monitor.cc \
	 src/persist/monitor.h \
	 src/persist/dbhelpers.cc \
	 include/db/dbhelpers.h \
	 src/db/agentstate/agentstate.cc \
	 src/db/agentstate/agentstate.h \
	 src/shared/asset_types.cc \
	 include/shared/asset_types.h \
	 include/dbtypes.h \
	 src/shared/topic_cache.cc \
	 include/shared/topic_cache.h \
	 include/db/assets.h \
	 include/db/assets/assetcr.h \
	 include/db/assets/assetr.h \
	 include/db/assets/assetu.h \
	 include/db/assets/assetd.h \
	 include/db/assetdef.h \
	 src/db/assets/assetcr.cc \
	 src/db/assets/assetr.cc \
	 src/db/assets/assetu.cc \
	 src/db/assets/assetd.cc \
	 src/db/inout.h \
	 src/db/inout.cc \
	 src/db/inout/importcsv.cc \
	 src/db/inout/exportcsv.cc \
	 src/db/asset_general.cc \
	 src/db/asset_general.h \
	 include/shared/tntmlm.h \
	 src/shared/tntmlm.cc \
	 src/shared/configure_inform.cc \
	 include/shared/configure_inform.h \
	 include/shared/fty_asset_uptime_configurator.h \
	 src/shared/fty_asset_uptime_configurator.cc \
	 src/shared/magic.cc \
	 include/bios_magic.h \
	 src/msg/asset_msg.cc \
	 include/msg/asset_msg.h \
	 src/msg/common_msg.cc \
	 include/msg/common_msg.h \
	 include/db/topology2.h \
	 src/db/topology2.cc \
	 include/shared/data.h \
	 src/shared/data.cc \
	 include/web/src/asset_computed_impl.h \
	 src/web/src/asset_computed_impl.cc

src_db_bios_csv_CPPFLAGS += -I$(srcdir)/src
endif #ENABLE_DB_BIOS_CSV


# The /usr/libexec/bios is known and used by several components
bios_libexecdir ?= $(prefix)/libexec/bios
bios_libdir ?= $(prefix)/lib/bios

SED ?= sed
autopathedit = ${SED} \
	-e 's|@myDBpath[@]|$(myDBpath)|g' \
	-e 's|@top_srcdir[@]|$(top_srcdir)|g' \
	-e 's|@top_builddir[@]|$(top_builddir)|g' \
	-e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \
	-e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \
	-e 's|@mysrcDIR[@]|$(mysrcDIR)|g' \
	-e 's|@srcdir[@]|$(srcdir)|g' \
	-e 's|@myDOXDIR[@]|$(myDOXDIR)|g' \
	-e 's|@mydoxylog[@]|$(mydoxylog)|g' \
	-e 's|@HAVE_DOXYGEN[@]|$(HAVE_DOXYGEN)|g' \
	-e 's|@datadir[@]|$(datadir)|g' \
	-e 's|@datarootdir[@]|$(datarootdir)|g' \
	-e 's|@PACKAGE[@]|$(PACKAGE)|g' \
	-e 's|@PACKAGE_NAME[@]|$(PACKAGE_NAME)|g' \
	-e 's|@PACKAGE_VERSION[@]|$(PACKAGE_VERSION)|g' \
	-e 's|@prefix[@]|$(prefix)|g' \
	-e 's|@sysconfdir[@]|$(sysconfdir)|g' \
	-e 's|@libexecdir[@]|$(libexecdir)|g' \
	-e 's|@bios_libexecdir[@]|$(bios_libexecdir)|g' \
	-e 's|@bios_libdir[@]|$(bios_libdir)|g' \
	-e 's|@libdir[@]|$(libdir)|g'

define process-in-file
	echo "  SED      $(1) => $(2)"; rm -f $(2); mkdir -p "`dirname "$(2)"`"; $(autopathedit) < "$(1)" > "$(2)" || exit $$?
endef

# These are generated by this Makefile with sed from .in files, and chmod+x'ed
# For many of the scripts here, you also want to update "client_SCRIPTS" below
GENERATEDSCRIPTS = \
	tools/bios-passwd

EXTRA_DIST +=	$(GENERATEDSCRIPTS)
CLEANFILES +=	$(GENERATEDSCRIPTS)

EXTRA_DIST +=	tools/testpass.sh
EXTRA_DIST +=	src/fty_rest_classes.h

# Catch-all undetailed recipes for .in files to be converted into sources
# Also used from sub-Makefiles, see docs/examples/Makefile.am for call-syntax
# Note that some files should not be regenerated by the Makefile via SED when
# pulled by EXTRA_DIST, so we just verify it exists
%:: %.in $(abs_top_builddir)/Makefile
	@case "`basename "$@"`" in \
	    admin_passwd.ecpp|bios-passwd|bios_agent++.h) \
	        $(call process-in-file,$<,$(dir $<)$(notdir $@)) ;; \
	    Make*)  if [ -s "$@" ] ; then \
	                echo "  SKIP-SED $@.in" && exit 0 ; \
	            else echo "ERROR: Missing file $@ that should have been generated by configure script!" >&2; exit 1; \
	            fi ;; \
	    *)  if [ -s "$@" ] ; then \
	            echo "  SKIP-SED $@.in : currently not handled" && exit 0 ; \
	        fi ;; \
	 esac

# TODO (BIOS-1262): the "install-ci_helperSCRIPTS" recipe installs one script
# into "@libexecdir@/@PACKAGE@/bios-passwd" because this is hardcoded in
# admin_passwd.ecpp.in - not very nice regarding in-tree devtesting.
# This is an optional target - without this script working (including the
# sudoers setup), the REST API tests involving password changes will fail.
ci_helper_SCRIPTS =    tools/bios-passwd tools/testpass.sh
package_CLIENTS_BIOS_CSV =    $(DESTDIR)$(bindir)/bios-csv
ci_helperdir =         $(clientdir)

ECPPC ?= ecppc
ECPPFLAGS = --nolog
ECPPFLAGS_CPP = -I$(top_builddir)/include -I$(top_srcdir)/include

ECPPFILES= \
  web/src/add_gpio.ecpp \
  web/src/admin_iface.ecpp \
  web/src/admin_ifaces.ecpp \
  web/src/admin_passwd.ecpp \
  web/src/admin_sse.ecpp \
  web/src/alert_ack.ecpp \
  web/src/alert_list.ecpp \
  web/src/alert_rules_detail.ecpp \
  web/src/alert_rules.ecpp \
  web/src/alert_rules_list.ecpp \
  web/src/asset_DELETE.ecpp \
  web/src/asset_export.ecpp \
  web/src/asset_GET.ecpp \
  web/src/asset_import.ecpp \
  web/src/asset_list.ecpp \
  web/src/asset_POST.ecpp \
  web/src/asset_PUT.ecpp \
  web/src/assets_in.ecpp \
  web/src/auth.ecpp \
  web/src/auth_verify.ecpp \
  web/src/average.ecpp \
  web/src/config.ecpp \
  web/src/conf_scan.ecpp \
  web/src/current.ecpp \
  web/src/datacenter_indicators.ecpp \
  web/src/email_feedback.ecpp \
  web/src/email_test.ecpp \
  web/src/email_vote.ecpp \
  web/src/find_access_token.ecpp \
  web/src/getlog_GET.ecpp \
  web/src/gpo_action.ecpp \
  web/src/info.ecpp \
  web/src/input_power_chain.ecpp \
  web/src/json.ecpp \
  web/src/license.ecpp \
  web/src/license_POST.ecpp \
  web/src/license_status.ecpp \
  web/src/license_text.ecpp \
  web/src/list_gpio.ecpp \
  web/src/my_profile.ecpp \
  web/src/netcfg.ecpp \
  web/src/not_found.ecpp \
  web/src/rack_total.ecpp \
  web/src/scan_progress.ecpp \
  web/src/scan_run.ecpp \
  web/src/security_headers.ecpp \
  web/src/server_status.ecpp \
  web/src/ssl_redirect.ecpp \
  web/src/sysinfo.ecpp \
  web/src/systemctl.ecpp \
  web/src/time.ecpp \
  web/src/topology_location_from2.ecpp \
  web/src/topology_location_from.ecpp \
  web/src/topology_location_to.ecpp \
  web/src/topology_power.ecpp \
  web/src/uptime.ecpp \
  web/src/security_removeheaders.ecpp \
  web/src/hw_capability.ecpp

TNTLIB_BASENAME=libfty_rest
TNTLIB_DIRNAME=$(pkglibdir)
# Note: TNTLIB_DIRNAME used to be /usr/lib/bios before renaming in the project
# structure, but tntnet looks for shared objects according to their "@name" in
# its XML config, which impacts the directory pathname as well. Note that this
# path should be the one set via <compPath>/<entry> items in the XML config
# (see below for the tntnet.xml.example file generation - it seeds the OS image
# configuration later on).

ECPPCCFILES = $(ECPPFILES:.ecpp=.cc)

EXTRA_DIST += $(addprefix $(top_srcdir)/src/,$(ECPPFILES))
EXTRA_DIST += $(top_srcdir)/src/web/src/admin_passwd.ecpp

.ecpp.cc:
	${ECPPC} ${ECPPFLAGS} ${ECPPFLAGS_CPP} -o $(top_builddir)/src/web/src/$(@F) $(top_srcdir)/src/web/src/$(<F) && \
	    mv -f $(top_builddir)/src/web/src/$(@F).cpp $(top_builddir)/src/web/src/$(@F)

src/web/src/sysinfo.ecpp src/web/src/sysinfo.cc src/web/src/sysinfo.cpp: include/git_details_override.h

# Find the generated include-file (only exists under builddir)
src_libfty_rest_la_CXXFLAGS += -I$(abs_top_builddir)/include
src_libfty_rest_la_CPPFLAGS += -I$(abs_top_builddir)/include

# Find the fty_rest_classes.h which is under src and not part of builddir
src_libfty_rest_la_CXXFLAGS += -I$(abs_top_srcdir)/src
src_libfty_rest_la_CPPFLAGS += -I$(abs_top_srcdir)/src

#----------------------------------------------------------------------
#                        hook for make all => generate files too
#----------------------------------------------------------------------

# Just in case we don't have all dependencies properly spelled out,
# try to ensure that certain files are built early in the process
all-local: $(abs_top_builddir)/src/git_details_override.cc \
            .git_details .git_details-fty-rest \
            src/libfty_rest.la src/db/bios-csv

# Try to build everything buildable, e.g. for further warning counters
all-buildproducts: all-local all web-test-deps \
            $(check_LTLIBRARIES) $(check_PROGRAMS) $(check_SCRIPTS) \
            $(cibin_programs_list)

#----------------------------------------------------------------------
#                        hook for make check custom verifications
#----------------------------------------------------------------------

distclean-local:
	@if [ x"$(abs_top_builddir)/.git_details" != x"$(abs_top_srcdir)/.git_details" ]; then \
	    /bin/rm -f $(abs_top_builddir)/.git_details \
	               $(abs_top_builddir)/.git_details-fty-rest; \
	fi || true

# Run compile/link tests defined in this Makefile
# Note that check-gitignore should be the last target
# FIXME: "check-pool" temporarily not included into "check-local", see below
# TODO POST-ZPROJECTIZATION : This target is defined in the
#   generated src/Makemodule.am -- make a variable in zproject
#   for additional targets to list there, or append somehow...
#check-local: web-link-test

#----------------------------------------------------------------------
#                       hook for installation legacy-like customization
#----------------------------------------------------------------------

clean-junit:
	/bin/rm -rf $(abs_top_builddir)/tests/junit

clean-ecpp-cc:
	for file in $(ECPPCCFILES); do \
	    /bin/rm -f $(top_builddir)/src/$$file; \
	done

clean-local: clean-junit clean-ecpp-cc

# Technically the implementation of tntnet servlets is a shared library
# It is not intended for linking by other apps, and needs no static version
uninstall-tntnet-nonshared:
	/bin/rm -f $(DESTDIR)$(TNTLIB_DIRNAME)/$(TNTLIB_BASENAME).a* \
	           $(DESTDIR)$(TNTLIB_DIRNAME)/$(TNTLIB_BASENAME).pc* \
	           $(DESTDIR)$(TNTLIB_DIRNAME)/*/$(TNTLIB_BASENAME).pc* \
	           $(DESTDIR)$(TNTLIB_DIRNAME)/$(TNTLIB_BASENAME).la*
	/bin/rm -f $(DESTDIR)$(libdir)/$(TNTLIB_BASENAME).a* \
	           $(DESTDIR)$(libdir)/$(TNTLIB_BASENAME).pc* \
	           $(DESTDIR)$(libdir)/*/$(TNTLIB_BASENAME).pc* \
	           $(DESTDIR)$(libdir)/$(TNTLIB_BASENAME).la*

uninstall-tntnet-includes:
	/bin/rm -fr $(DESTDIR)$(includedir)/$(PACKAGE)

uninstall-local: uninstall-tntnet-nonshared uninstall-tntnet-includes
	/bin/rm -f $(DESTDIR)$(TNTLIB_DIRNAME)/$(TNTLIB_BASENAME).so*
	/bin/rm -f $(DESTDIR)$(prefix)/libexec/$(PACKAGE)/bios-csv

# Install the built shared objects for tntnet using legacy fty-rest locations
install-exec-hook-tntnet-so:
	mkdir -p $(DESTDIR)$(TNTLIB_DIRNAME) && \
	    mv -f $(DESTDIR)$(libdir)/$(TNTLIB_BASENAME).so.* $(DESTDIR)$(TNTLIB_DIRNAME)
	/bin/rm -f $(DESTDIR)$(TNTLIB_DIRNAME)/$(TNTLIB_BASENAME).so $(DESTDIR)$(libdir)/$(TNTLIB_BASENAME).so
	cd $(DESTDIR)$(TNTLIB_DIRNAME) && \
	    ln -fs "`ls -1 $(TNTLIB_BASENAME).so.* | tail -1`" $(TNTLIB_BASENAME).so

install-exec-hook-bioscsv:
	mkdir -p "$(DESTDIR)$(prefix)/libexec/$(PACKAGE)" && \
	    mv -f "$(package_CLIENTS_BIOS_CSV)" "$(DESTDIR)$(prefix)/libexec/$(PACKAGE)/"

install-exec-hook-cihelpers:
	if test x"$(ci_helperdir)" != x"$(prefix)/libexec/$(PACKAGE)" ; then \
	    for F in $(ci_helper_SCRIPTS) ; do \
	        F="`basename "$$F"`"; \
	        ln -fsr "$(DESTDIR)$(ci_helperdir)/$$F" "$(DESTDIR)$(prefix)/libexec/$(PACKAGE)/" ; \
	    done ; \
	fi

install-exec-hook: install-exec-hook-tntnet-so install-exec-hook-bioscsv install-exec-hook-cihelpers

### This file contains the TNTNET settings relevant for our test runs
### Note: in non-daemon mode, stderr is logged to stderr
tntnet.xml: src/web/tntnet.xml Makefile
	${SED} -e 's|\(.*\)\(<!--.*<dir>/</dir>.*-->.*\)|\1<dir>$(abs_top_srcdir)/src/web</dir>\n\1<compPath><entry>$(abs_top_builddir)/src/.libs</entry><entry>$(abs_top_builddir)/.libs</entry></compPath>|' $< > $@ || \
	rm -f $@

### This file contains the TNTNET settings distributed as an example for users
### Note: in daemon mode, "stderr > /dev/null" unless errorLog is defined
tntnet.xml.example: src/web/tntnet.xml Makefile
	${SED} -e 's|\(.*\)\(<!--.*<dir>/</dir>.*-->.*\)|\1<dir>$(datarootdir)/@PACKAGE@/web</dir>\n\1<compPath>\n\1\ \ \ <entry>$(pkglibdir)</entry>\n\1\ \ \ <entry>$(libdir)</entry>\n\1\ \ \ <entry>$(bios_libexecdir)</entry>\n\1\ \ \ <entry>$(bios_libdir)</entry>\n\1</compPath>|' \
	       -e 's|<!-- <errorLog>/var/log/tntnet/error.log</errorLog> -->|<errorLog>/var/log/tntnet/error.log</errorLog>|' \
	       -e 's|<port>8000</port>|<port>80</port>|' \
	       -e 's|<port>8443</port>|<port>443</port>|' \
	       -e 's|<!-- ssl start.*|<!-- ssl start -->|' \
	       -e 's|^\([[:blank:]]*\)ssl end -->|\1<!-- ssl end -->|' \
	       -e 's|<!--\ <daemon>0</daemon>\ -->|<daemon>1</daemon>|' $< > $@ || \
	rm -f $@

exampleconfdir =	$(datarootdir)/@PACKAGE@/examples
exampleconf_DATA =	tntnet.xml.example
EXTRA_DIST +=		$(exampleconf_DATA)
dist_noinst_DATA =	tntnet.xml $(top_srcdir)/src/web/tntnet.xml

CLEANFILES +=		tntnet.xml tntnet.xml.example

#----------------------------------------------------------------------
#                        In-place tests for developers and CI
#----------------------------------------------------------------------
CLEANFILES +=		tests/CI/tntnet.xml

DISTCLEANFILES += \
		tests/CI/web/log/*.log

DISTCLEANDIRS += \
		tests/CI/web/log

# Test data are also part of sources to redistribute
# The COPYING file is symlinked to from the license fixtures
EXTRA_DIST +=  tests/fixtures COPYING

# How to run tntnet from Makefile
RUN_TNTNET_ENVFILE = $(abs_top_builddir)/tests/run_tntnet_make.env
EXTRA_DIST +=  tests/run_tntnet_packaged.env
CLEANFILES +=  $(RUN_TNTNET_ENVFILE)
$(RUN_TNTNET_ENVFILE): $(abs_top_builddir)/Makefile
	mkdir -p "`dirname "$@"`"
	{   echo '# 100% Generated by 42ity Makefile'; \
	    echo 'export LICENSE_DIR="$(abs_top_builddir)/tests/fixtures/license"'; \
	    echo 'export DATADIR_BASE="$(abs_top_builddir)/var"'; \
	    echo 'export TESTPASS="$(abs_top_builddir)/tools/testpass.sh"'; \
	    echo 'export PATH="$(abs_top_builddir)/tools:$(abs_top_srcdir)/tools:$(ci_helperdir):$$PATH"'; \
	    echo 'export NO_SSL="1"'; \
	    echo '[ -z "$$BIOS_LOG_LEVEL" ] && BIOS_LOG_LEVEL="LOG_DEBUG"'; \
	    echo 'export BIOS_LOG_LEVEL'; \
	    echo 'export DATADIR="$$DATADIR_BASE/fty"'; \
	} > $@

RUN_TNTNET = ( cat "$(RUN_TNTNET_ENVFILE)" || exit; \
            . "$(RUN_TNTNET_ENVFILE)" || exit; \
            [ "x${KEEP_LICENSE}" = "xyes" ] || rm -rf "$$DATADIR_BASE"; id; \
            mkdir -p "$$DATADIR" && ls -la "$$DATADIR" && \
            [ -d "$$DATADIR" ] && [ -w "$$DATADIR" ] && \
            ${TNTNET} $(abs_top_builddir)/tntnet.xml )

# Make sure needed files are up-to-date to test web-server for 42ity REST API
web-test-deps: tntnet.xml src/libfty_rest.la web-link-test

# TODO: the "tools/testpass.sh" should be invoked via TESTPASS envvar used
# and exported in RUN_TNTNET - but this does not work for bios-passwd :(
web-test-deps-inst: install-ci_helperSCRIPTS

### Execute the test web-server for $BIOS REST API
# LD_PRELOAD=/path/to/libasan.so is needed for fair play with external libs,
# otherwise "new mlm_stuff; throw(exception)" breaks in ASAN as a function
# without a proper return code-path (un-instrumented delete/free involved).
# Note that the execution chain below is backslash-concatenated so that we
# can both set, export and use the LD_PRELOAD value (independent lines are
# executed as different shell scripts by make). That is why ultimate exec
# of the tntnet program is done twice in the same manner.

ASAN_TNTNET =
if ENABLE_ASAN
### Note: this must end with a command separator (;) if not empty
ASAN_TNTNET += \
	LD_PRELOAD="$$LD_PRELOAD `ldd $(abs_top_builddir)/src/.libs/libfty_rest.so | grep libasan | awk '{print $$3}'`" || true; \
	LD_PRELOAD="$$LD_PRELOAD `ldd $(abs_top_builddir)/src/.libs/libfty_rest.so | grep libtsan | awk '{print $$3}'`" || true; \
	echo "===== Using LD_PRELOAD='$$LD_PRELOAD' for Address Sanitizer"; \
	export LD_PRELOAD;
endif

web-test: $(RUN_TNTNET_ENVFILE) web-test-deps
	@echo "=== Running target $@ with credentials of this user: "; \
		id || true; echo ""
	@$(ASAN_TNTNET) $(RUN_TNTNET)

#----------------------------------------------------------------------
#                        Common libs for test programs
#----------------------------------------------------------------------
noinst_LTLIBRARIES += 		libpriv-utils.la

libpriv_utils_la_SOURCES = 	\
				src/shared/utils.cc \
				include/shared/utils.h \
				include/defs.h \
				include/shared/utils_json.h \
				src/shared/utils_json.cc \
				include/shared/utilspp.h \
				src/shared/utilspp.cc \
				include/shared/subprocess.h \
				src/shared/subprocess.cc \
				include/shared/augtool.h \
				src/shared/augtool.cc \
				include/shared/ic.h \
				src/shared/ic.cc \
				include/shared/csv.h \
				src/shared/csv.cc \
				include/shared/cidr.h \
				src/shared/cidr.cc \
				include/db/types.h \
				src/persist/assetcrud.cc \
				src/persist/assetcrud.h \
				src/persist/assettopology.cc \
				src/persist/assettopology.h \
				src/persist/persist_error.cc \
				src/persist/persist_error.h \
				src/persist/monitor.cc \
				src/persist/monitor.h \
				src/persist/dbhelpers.cc \
				src/persist/dbhelpers.h \
				include/db/dbhelpers.h \
				src/db/agentstate/agentstate.cc \
				src/db/agentstate/agentstate.h \
				src/shared/asset_types.cc \
				include/shared/asset_types.h \
				include/dbtypes.h \
				src/shared/topic_cache.cc \
				include/shared/topic_cache.h \
				include/db/assets.h \
				include/db/assets/assetcr.h \
				include/db/assets/assetr.h \
				include/db/assets/assetu.h \
				include/db/assets/assetd.h \
				include/db/assetdef.h \
				src/db/assets/assetcr.cc \
				src/db/assets/assetr.cc \
				src/db/assets/assetu.cc \
				src/db/assets/assetd.cc \
				src/db/inout.h \
				src/db/inout/importcsv.cc \
				src/db/inout/exportcsv.cc \
				src/db/asset_general.cc \
				src/db/asset_general.h \
				include/shared/tntmlm.h \
				src/shared/tntmlm.cc \
				src/shared/configure_inform.cc \
				include/shared/configure_inform.h \
				include/shared/fty_asset_uptime_configurator.h \
				src/shared/fty_asset_uptime_configurator.cc \
				src/shared/magic.cc \
				include/bios_magic.h \
				src/msg/asset_msg.cc \
				include/msg/asset_msg.h \
				src/msg/common_msg.cc \
				include/msg/common_msg.h \
				include/db/topology2.h \
				src/db/topology2.cc

libpriv_utils_la_LDFLAGS = ${cxxtools_LIBS} ${tntdb_LIBS} ${czmq_LIBS} ${malamute_LIBS} ${fty_proto_LIBS} ${log4cplus_LIBS} ${fty_common_LIBS}

libpriv_utils_la_CPPFLAGS =$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/src/persist \
				-I$(abs_top_srcdir)/src/db


# Needed at least for the distcheck (post distribution tests)
EXTRA_DIST +=		tests/run-test.sh
LOG_COMPILER =		$(abs_top_srcdir)/tests/run-test.sh


#Test case examples:
#
#thisTestOnly            Matches the test case called, 'thisTestOnly'
#"this test only"        Matches the test case called, 'this test only'
#these*                  Matches all cases starting with 'these'
#exclude:notThis         Matches all tests except, 'notThis'
#~notThis                Matches all tests except, 'notThis'
#~*private*              Matches all tests except those that contain 'private'
#a* ~ab* abc             Matches all tests that start with 'a', except those that
#                        start with 'ab', except 'abc', which is included
#
#Names within square brackets are interpreted as tags. A series of tags form an AND expression wheras a comma-separated sequence forms an OR expression. e.g.:
#
#[one][two],[three]
# setup using AM_LOG_FLAGS see an example
# AM_LOG_FLAGS = 				~[db]

check_LTLIBRARIES += 			libpriv-test-run.la

libpriv_test_run_la_SOURCES = \
				tests/include/catch.hpp \
				tests/test-run.cc

libpriv_test_run_la_CPPFLAGS = \
				$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tests/include/

#----------------------------------------------------------------------
#                        Unit test binaries
#----------------------------------------------------------------------

###
check_PROGRAMS += test-web-helpers

test_web_helpers_SOURCES = \
				tests/web/src/test-helpers.cc
#				src/web/src/helpers.cc

test_web_helpers_LDADD = \
				libpriv-test-run.la \
				libpriv-utils.la

test_web_helpers_CPPFLAGS =\
				$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tests/include/

test_web_helpers_LDFLAGS =	${tntnet_LIBS} ${tntdb_LIBS} ${cxxtools_LIBS} ${czmq_LIBS}

###
check_PROGRAMS +=	test-utils-web

test_utils_web_SOURCES = \
				tests/shared/test-utils-web.cc
#fty-common#	src/include/utils_web.h

test_utils_web_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la

test_utils_web_CPPFLAGS = \
				$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tests/include/

test_utils_web_LDFLAGS =	${cxxtools_LIBS} ${czmq_LIBS}

###
check_PROGRAMS +=	test-tntmlm

test_tntmlm_SOURCES = \
				include/shared/tntmlm.h \
				src/shared/tntmlm.cc \
				tests/shared/test-tntmlm.cc

test_tntmlm_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la

test_tntmlm_CPPFLAGS = \
				$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tests/include/

test_tntmlm_LDFLAGS =	${czmq_LIBS} ${malamute_LIBS} ${cxxtools_LIBS}

check_PROGRAMS +=	test-utils-plusplus

test_utils_plusplus_SOURCES = \
				include/shared/utilspp.h \
				tests/shared/test-utils++.cc

test_utils_plusplus_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la

test_utils_plusplus_CPPFLAGS = \
				$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tests/include/

test_utils_plusplus_LDFLAGS =	${czmq_LIBS}

check_PROGRAMS += 	test-utils

test_utils_SOURCES = \
				include/shared/utils.h \
				tests/shared/test-utils.cc

test_utils_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la

test_utils_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/

test_utils_LDFLAGS =	${czmq_LIBS}

noinst_PROGRAMS += 			test-subprocess
test_subprocess_SOURCES = \
				include/shared/subprocess.h \
				tests/shared/test-subprocess.cc

test_subprocess_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la

test_subprocess_CPPFLAGS = \
				$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/tests/include/
test_subprocess_LDFLAGS =		${cxxtools_LIBS} ${czmq_LIBS}

check_PROGRAMS += 	test-cidr
test_cidr_SOURCES = \
				src/shared/cidr.cc \
				tests/shared/test-cidr.cc
test_cidr_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la
test_cidr_CFLAGS = 	${cidr_CFLAGS}
test_cidr_CPPFLAGS = 	$(AM_CPPFLAGS) ${cidr_CPPFLAGS} \
				-I$(abs_top_srcdir)/tests/include/
test_cidr_LDFLAGS =	${cidr_LIBS}


check_PROGRAMS += 	test-csv

test_csv_SOURCES = \
				include/shared/csv.h \
				tests/shared/test-csv.cc

test_csv_LDADD = \
				libpriv-utils.la \
				libpriv-test-run.la

test_csv_CPPFLAGS =		$(AM_CPPFLAGS) \
				-I$(abs_top_srcdir)/src \
				-I$(abs_top_srcdir)/src/persist \
				-I$(abs_top_srcdir)/src/msg \
				-I$(abs_top_srcdir)/tests/include

test_csv_LDFLAGS =		${cxxtools_LIBS} ${tntdb_LIBS} ${malamute_LIBS} ${fty_proto_LIBS}

EXTRA_DIST +=	$(srcdir)/tests/shared/*.csv

#----------------------------------------------------------------------
#                        CI tests
#----------------------------------------------------------------------

cibin_programs += 	test-loadcsv

test_loadcsv_SOURCES = 	tests/persist/test-loadcsv.cc

test_loadcsv_LDADD = \
			libpriv-utils.la \
			libpriv-test-run.la

test_loadcsv_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db

test_loadcsv_LDFLAGS =	${tntdb_LIBS} ${cxxtools_LIBS} ${czmq_LIBS} ${malamute_LIBS} ${fty_proto_LIBS}


cibin_programs += 	test-db2

test_db2_SOURCES = \
			tests/persist/test-realdatamonitor.cc

test_db2_LDADD = \
			libpriv-utils.la \
			libpriv-test-run.la

test_db2_CPPFLAGS =	$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db

test_db2_LDFLAGS =	${tntdb_LIBS} ${cxxtools_LIBS} ${cidr_LIBS} ${czmq_LIBS}

cibin_programs += 	test-dbtopology

test_dbtopology_SOURCES = \
			tests/persist/test-topology.cc \
			tests/persist/test-topology-power-to.cc \
			tests/persist/test-topology-power-from.cc \
			tests/persist/test-topology-power-datacenter.cc \
			tests/persist/test-topology-power-group.cc \
			tests/persist/test-topology-location-from.cc \
			tests/persist/test-topology-location-to.cc

test_dbtopology_LDADD = \
			libpriv-utils.la \
			libpriv-test-run.la

test_dbtopology_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db

test_dbtopology_LDFLAGS = \
			${tntdb_LIBS} ${cxxtools_LIBS} ${cidr_LIBS} ${czmq_LIBS}


cibin_programs += 	test-db-asset-crud

test_db_asset_crud_SOURCES = \
			tests/persist/test-asset-crud.cc \
			tests/persist/test-asset-crud1.cc

test_db_asset_crud_LDADD = \
			libpriv-utils.la \
			libpriv-test-run.la

test_db_asset_crud_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db

test_db_asset_crud_LDFLAGS = \
			${tntdb_LIBS} ${cxxtools_LIBS} ${cidr_LIBS} ${czmq_LIBS}


#### total power tests
cibin_programs += 	test-totalpower

test_totalpower_SOURCES = \
			tests/persist/test-rack-power.cc \
			tests/persist/test-dc-power.cc

test_totalpower_LDADD = \
			libpriv-utils.la \
			libpriv-test-run.la

test_totalpower_CPPFLAGS = \
			$(AM_CPPFLAGS) \
			-I$(abs_top_srcdir)/tests/include/ \
			-I$(abs_top_srcdir)/src/persist \
			-I$(abs_top_srcdir)/src/db

test_totalpower_LDFLAGS = \
			${tntdb_LIBS} ${cxxtools_LIBS} ${cidr_LIBS} ${czmq_LIBS}


# Do we build and install CI programs by default? (see configure)
# LISTS for cibin_programs depending on config for this build
cibin_programs_list := $(cibin_programs)
cibindir = ${pkgbindir}
if ENABLE_CI_TESTS
cibin_PROGRAMS = $(cibin_programs)
else
# Try to cheat automake into NOT building these programs on simple "make check"
cibin_PROGRAMS =
override cibin_programs =
endif

# These may be built explicitly, so should be removable in any case
CLEANFILES += $(cibin_programs_list)

# Note: variable cibin_PROGRAMS may be empty if not enabled via configure
#   The variable cibin_programs holds the actual list of CI programs instead
# TARGETS for cibin_programs depending on config for this build
if ENABLE_CI_TESTS
cibin_PROGRAMS: $(cibin_PROGRAMS)
else
cibin_PROGRAMS:
endif
cibin_programs: $(cibin_programs_list)

### Verification that libfty_rest.so is in fact usable on binary level
### Note that this creates no retainable output file
web-link-test: src/libfty_rest.la
			$(CXX) $(AM_CPPFLAGS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -o /dev/null \
			$(abs_top_srcdir)/tests/web-linking-test.cc \
			${cxxtools_LIBS} ${tntnet_LIBS} \
			$(abs_top_builddir)/src/.libs/libfty_rest.so && \
			echo "PASS: dynamic-link compilation test: everything for libfty_rest.so does link ok!" || \
			( R=$$?; echo "FAIL ($$R): dynamic-link compilation test: libfty_rest.so unusable"; exit $$R; )

TESTS += $(check_PROGRAMS)
TESTS += $(check_SCRIPTS)

#----------------------------------------------------------------------
#                        SCM details
#----------------------------------------------------------------------

### Note: the legacy location for these git-details files is under
### /usr/share/bios (renamed into /usr/share/fty by preinstall script)
#gitdetaildir =		$(datarootdir)/@PACKAGE@
gitdetaildir =		$(datarootdir)/bios
gitdetail_DATA =	.git_details-fty-rest

EXTRA_DIST +=		.git_details \
			tools/git_details.sh \
			tools/JSON.sh

# For tarballs that no longer have a .git index and
# need these source files to complete their builds...
EXTRA_DIST +=		src/git_details_override.cc \
			include/git_details_override.h

CLEANFILES +=		src/git_details_override.cc \
			include/git_details_override.h \
			.git_details-fty-rest

src_libfty_rest_la_SOURCES += \
			src/git_details_override.cc

# Note: this could be a .git_details-@PACKAGE@ but our package string
# value so far is the legacy "bios", so we have to be explicit here
.git_details-fty-rest: .git_details
	@cp -pf $< $@

# The .git_details can be generated by OBS script which does the checkout of
# sources to be packaged, or by the top-level make in a "make dist" running
# in a Git workspace. Namely, this might not be regeneratable in each case,
# i.e. when just a tarball with no SCM data is used for the build - then the
# tarball should contain a current (latest generated) copy of this file.

# This target ensures the .git_details file is always re-evaluated somehow
.PHONY_GIT:

.git_details: $(abs_top_builddir)/.git_details
	@sync || true

# NOTE that in the target routine below we filter out PACKAGE_BUILD_TSTAMP
# changes because if nothing else changed, these don't matter much but do
# cause a rebuild of the C/H files and those which depend on them, on every
# "make" run. Just remove the file (distclean) to regenerate everything truly.
# For tests, can 'export GIT_DETAILS_BLANK=yes' to succeed even on git errors.
# Also note that a ".git" can be a file (for submodules), not a directory.
$(abs_top_builddir)/.git_details: $(abs_top_srcdir)/tools/git_details.sh .PHONY_GIT
	@echo "INFO: Checking that '$@' is up-to-date..."
	@/bin/rm -f "$@.tmp"
	@if test -e "$@" && ! test -s "$@" ; then \
	    echo "INFO: Found existing '$@' which was empty, removing" >&2 ; \
	    rm -f "$@" ; \
	 fi
	@if test -e "$(abs_top_srcdir)/.git" && \
	    ( cd "$(abs_top_srcdir)" && ./tools/git_details.sh > "$@.tmp" ) && \
	    [ -s "$@.tmp" ]; then \
	    if [ ! -s "$@" ] || diff -bu "$@" "$@.tmp" | \
	        egrep -v '^(\-\-\-|\+\+\+|[ @]|[\+\-]PACKAGE_BUILD_TSTAMP)' >/dev/null; then \
	      echo "INFO: Replacing '$@' with newly generated data:" && \
	      diff -bu "$@" "$@.tmp"; \
	      mv -f "$@.tmp" "$@"; touch "$@"; \
	    else echo "INFO: No substantial changes in contents of '$@' (although ignored PACKAGE_BUILD_TSTAMP)"; \
	    fi; \
	 else \
	   [ -s "$@" ] && echo "INFO: Reusing existing '$@'" && ls -la "$@"; \
	 fi || true
	@/bin/rm -f "$@.tmp"
	@if [ -s "$@" ]; then true; else \
	    if [ -s "$(abs_top_srcdir)/.git_details" ]; then \
	      [ x"$(abs_top_srcdir)/.git_details" != x"$@" ] && \
	      echo "INFO: Reusing existing '$(abs_top_srcdir)/.git_details':" && \
	      ls -la "$(abs_top_srcdir)/.git_details" && \
	      cp -f "$(abs_top_srcdir)/.git_details" "$@" ; \
	    else \
	      if [ -f "$@" ]; then echo "WARNING: '$@' is empty already"; else \
	      echo "WARNING: Overriding absent '$@' with empty file to satisfy 'make'"; \
	      touch "$@"; fi; \
	    fi; \
	 fi
	@sync || true

src/git_details_override.cc: $(abs_top_builddir)/src/git_details_override.cc
	@sync || true

$(abs_top_builddir)/src/git_details_override.cc: $(abs_top_builddir)/.git_details $(abs_top_builddir)/include/git_details_override.h
	@echo "INFO: Checking that '$@' is up-to-date..."
	@/bin/rm -f "$@.tmp" || true
	@( echo '// WARNING: This file is generated during make, DO NOT EDIT'; \
	  echo '#include <git_details_override.h>'; \
	  grep '_ESCAPED=' "$<" | sed 's,^\(PACK.*;\)$$,const char * \1,'; ) | sed 's,\\,\\\\,g' > "$@.tmp" || \
	 /bin/rm -f "$@.tmp"
	@if [ -s "$@.tmp" ]; then \
	    if [ ! -s "$@" ]; then \
	        echo "INFO: '$@' is missing, so using the newly generated file"; \
	        mv -f "$@.tmp" "$@"; touch "$@"; \
	    else \
	        if  diff -bu "$@" "$@.tmp" | \
	            egrep -v '^(\-\-\-|\+\+\+|[ @]|[\+\-]char . PACKAGE_BUILD_TSTAMP)' \
	        >/dev/null ; then \
	            echo "INFO: Replacing '$@' with newly generated data:"; \
	            diff -bu "$@" "$@.tmp"; \
	            mv -f "$@.tmp" "$@"; touch "$@"; \
	        else echo "INFO: No changes in contents of '$@' (although ignored PACKAGE_BUILD_TSTAMP)"; fi; \
	    fi; \
	 else [ -s "$@" ] && echo "INFO: Reusing existing '$@'" && ls -la "$@"; \
	 fi
	@/bin/rm -f "$@.tmp"
	@[ -s "$@" ] || { echo "WARNING: Overriding absent '$@' with empty file to satisfy 'make'"; \
	  touch -r "$<" "$@"; } || true
	@sync || true

# NOTE: Legacy compatibility support: This alias may have been
# needed by some recipes, including codebase out of this repo.
git_details_override.h:
	@cd $(top_builddir) && $(MAKE) include/git_details_override.h

include/git_details_override.h: $(abs_top_builddir)/include/git_details_override.h
	@sync || true

$(abs_top_builddir)/include/git_details_override.h: $(abs_top_builddir)/.git_details
	@echo "INFO: Checking that '$@' is up-to-date..."
	@( echo '// WARNING: This file is generated during make, DO NOT EDIT'; \
	  echo '#ifndef BIOS_GIT_DETAILS_OVERRIDE' && \
	  echo '#define BIOS_GIT_DETAILS_OVERRIDE' && \
	  [ -s "$<" ] && { \
	    { echo '#ifdef HAVE_PACKAGE_GIT'; \
	      echo '#undef HAVE_PACKAGE_GIT'; \
	      echo '#endif'; \
	      egrep 'PACKAGE_GIT_BRANCH_ESCAPED=".+";' "$<" >/dev/null && \
	        echo '#define HAVE_PACKAGE_GIT 1' || true; } && \
	    { echo '#ifdef HAVE_PACKAGE_BUILD_HOST'; \
	      echo '#undef HAVE_PACKAGE_BUILD_HOST'; \
	      echo '#endif'; \
	      egrep 'PACKAGE_BUILD_HOST_OS_ESCAPED=".+";' "$<" >/dev/null && \
	        echo '#define HAVE_PACKAGE_BUILD_HOST 1' || true; } && \
	    { echo '#ifdef HAVE_PACKAGE_BUILD_TSTAMP'; \
	      echo '#undef HAVE_PACKAGE_BUILD_TSTAMP'; \
	      echo '#endif'; \
	      egrep 'PACKAGE_BUILD_TSTAMP_ESCAPED="[0-9]+";' "$<" >/dev/null && \
	        echo '#define HAVE_PACKAGE_BUILD_TSTAMP 1' || true; } && \
	    grep '_ESCAPED=' "$<" | sed 's,^\(PACK[^=]*\)\(=.*\);$$,#ifdef \1\n#undef \1\n#endif\nextern const char * \1;,'; \
	  }; echo '#endif // BIOS_GIT_DETAILS_OVERRIDE'; ) > "$@.tmp" || \
	 /bin/rm -f "$@.tmp"
	@{ [ -s "$@.tmp" ] && { diff -bu "$@" "$@.tmp" && \
	    echo "INFO: No changes in contents of '$@'" || \
	    { echo "INFO: Replacing '$@' with newly generated data"; \
	      mv -f "$@.tmp" "$@"; } } } || { \
	  [ -s "$@" ] && echo "INFO: Reusing existing '$@'" && ls -la "$@"; }; \
	  true
	@/bin/rm -f "$@.tmp"
	@[ -s "$@" ] || { echo "WARNING: Overriding absent '$@' with empty file to satisfy 'make'"; \
	  touch -r "$<" "$@"; } || true
	@sync || true
